@page "/settings"
@inject GameSettings settings
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="card mb-1">
    <div class="card-body">
        <div class="row justify-content-between">
            <div class="col-auto">
                <h5 class="card-title">Game Settings</h5>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-outline-secondary">X</button>
            </div>
        </div>
        @if (isLoaded)
        {
            <div class="row mb-2">
                <label>Dauber</label>
                <InputSelect @bind-Value="settings.Dauber">
                    @foreach (var dauber in Daubers.Keys)
                    {
                        <option value="@dauber">@dauber</option>
                    }
                </InputSelect>

                <div class="container text-center">
                    <div class="row row-cols-auto">
                        @foreach (var dauber in Daubers.Keys)
                        {
                            <div class="col px-0" @onclick="eventargs => SelectDauber(eventargs, dauber)"><button type="button" class="btn btn-sm"><span class="stamp" style="font-size:2.5rem;">@((MarkupString)SettingsScreen.Daubers[dauber])</span></button></div>
                        }
                    </div>
                </div>
            </div>

            <div class="row mb-2">
                <label>Card Theme</label>
                <InputSelect @bind-Value="settings.CardTheme">
                    @foreach (var cardTheme in CardThemes)
                    {
                        <option value="@cardTheme.CssName()">@cardTheme</option>
                    }
                </InputSelect>
            </div>

            @if (!isGameStarted)
            {
                <div class="row mb-2">
                    <label>Game Pattern</label>
                    <div class="row justify-content-center d-flex align-items-center">
                        <div class="col-auto mb-3">
                            <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="() => { gamePatternIndex--; }">&lt;</button>
                        </div>
                        <div class="col-auto">
                            <GamePatternDisplay Pattern="@GamePatterns.GetPatternName(gamePatternIndex)"></GamePatternDisplay>
                        </div>
                        <div class="col-auto mb-3">
                            <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="() => { gamePatternIndex++; }">&gt;</button>
                        </div>
                    </div>
                    <div style="max-width:70%;margin-left:auto;margin-right:auto;">
                        <input type="range" class="form-range form-control-lg" min="0" max="@(GamePatterns.GetPatternNames().Count()-1)" step="1" @bind="@gamePatternIndex" @bind:event="oninput" />
                    </div>
@* 
                    <div class="grid" tabindex="-1" style="height: 12rem; overflow-y: auto;">
                        <ul class="list-group list-group-flush">
                            @foreach (var patternName in GamePatterns.GetPatternNames())
                            {
                            <li class="list-group-item">
                                <GamePatternDisplay Pattern="@patternName"></GamePatternDisplay>
                            </li>                        
                            }
                        </ul>
                    </div>
*@
                </div>
            }

            <div class="row mb-2">
                <label>Caller</label>
                <button type="button" class="symbolbutton" title="toggle mute" @onclick="ToggleMute"><span class="@( settings.IsMuted ? "speakermuted" : "speaker" )"></span></button>
            </div>
            @if (showVoiceSelection)
                {
                    <div class="row mb-2">
                        <label>Language</label>
                        <InputSelect @bind-Value="settings.SelectedLanguage">
                            @foreach (var lang in voices!.Select(x => x.lang).Distinct().Order())
                            {
                                <option>@lang</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="row mb-2">
                        <label>Voice</label>
                        <InputSelect @bind-Value="settings.CallerVoice" id="voiceSelect">
                            @foreach (var voice in voices!.Where(x => x.lang == settings.SelectedLanguage))
                            {
                                <option value="@voice.name" data-lang="@voice.lang">@voice.name.Replace("Microsoft ", string.Empty)</option>
                            }
                        </InputSelect>
                    </div>
                }
            }
    </div>
</div>
<div class="card mb-1">
    <div class="card-body">
        <details>
            <summary class="card-title">System Info</summary>
            <ul>
                <li>User-Agent: @userAgent</li>
                <li>Platform: @platform</li>
                <li>Language: @language</li>
            </ul>
        </details>
    </div>
</div>
