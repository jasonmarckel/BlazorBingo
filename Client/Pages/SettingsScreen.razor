@page "/settings"
@inject GameSettings settings
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="card mb-1">
    <div class="card-body">
        <h5 class="card-title">Game Settings</h5>
        @if (isLoaded)
        {
            <div class="row mb-2">
                <label>Dauber</label>
                <InputSelect @bind-Value="settings.Dauber">
                    @foreach (var dauber in Daubers)
                    {
                        <option value="@dauber.CssName()">@dauber</option>
                    }
                </InputSelect>

                <div class="container text-center">
                    <div class="row row-cols-auto">
                        @for (var i = 1; i < Daubers.Count(); i++)
                        {
                            string cssName = @Daubers[i].CssName();
                            <div class="col" @onclick="eventargs => SelectDauber(eventargs, cssName)"><button class="btn"><span class="stamp @cssName" style="font-size:2.5rem;"></span></button></div>
                        }
                    </div>
                </div>
            </div>

            <div class="row mb-2">
                <label>Card Theme</label>
                <InputSelect @bind-Value="settings.CardTheme">
                    @foreach (var cardTheme in CardThemes)
                    {
                        <option value="@cardTheme.CssName()">@cardTheme</option>
                    }
                </InputSelect>
            </div>

            <div class="row mb-2">
                <label>Game Pattern</label>
@*
                <InputSelect @bind-Value="settings.SelectedPattern" disabled="@isGameStarted">
                    @foreach (var pattern in GamePatterns.GetPatternNames())
                    {
                        <option value="@pattern">@pattern</option>
                    }
                </InputSelect>
*@
                <div class="row justify-content-center">
                    <div class="col-auto">
                        <button type="button" class="btn" @onclick="() => { gamePatternIndex--; }">&lt;</button>
                    </div>
                    <div class="col-auto">
                        <GamePatternDisplay Pattern="@GamePatterns.GetPatternName(gamePatternIndex)"></GamePatternDisplay>
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn" @onclick="() => { gamePatternIndex++; }">&gt;</button>
                    </div>
                </div>
                <div style="max-width:75%;margin-left:auto;margin-right:auto;">
                    <input type="range" class="form-range form-control-lg" min="0" max="@(GamePatterns.GetPatternNames().Count()-1)" step="1" @bind="@gamePatternIndex" @bind:event="oninput" />
                </div>
@* 
                <div class="grid" tabindex="-1" style="height: 12rem; overflow-y: auto;">
                    <ul class="list-group list-group-flush">
                        @foreach (var patternName in GamePatterns.GetPatternNames())
                        {
                        <li class="list-group-item">
                            <GamePatternDisplay Pattern="@patternName"></GamePatternDisplay>
                        </li>                        
                        }
                    </ul>
                </div>
*@
            </div>

            <div class="row mb-2">
                <label>Caller</label>
                <button type="button" class="symbolbutton" title="toggle mute" @onclick="ToggleMute"><span class="@( settings.IsMuted ? "speakermuted" : "speaker" )"></span></button>
            </div>
            @if (showVoiceSelection)
                {
                    <div class="row mb-2">
                        <label>Language</label>
                        <InputSelect @bind-Value="settings.SelectedLanguage">
                            @foreach (var lang in voices!.Select(x => x.lang).Distinct().Order())
                            {
                                <option>@lang</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="row mb-2">
                        <label>Voice</label>
                        <InputSelect @bind-Value="settings.CallerVoice" id="voiceSelect">
                            @foreach (var voice in voices!.Where(x => x.lang == settings.SelectedLanguage))
                            {
                                <option value="@voice.name" data-lang="@voice.lang">@voice.name.Replace("Microsoft ", string.Empty)</option>
                            }
                        </InputSelect>
                    </div>
                }
            }
    </div>
</div>
<div class="card mb-1">
    <div class="card-body">
        <details>
            <summary class="card-title">System Info</summary>
            <ul>
                <li>User-Agent: @userAgent</li>
                <li>Platform: @platform</li>
                <li>Language: @language</li>
            </ul>
        </details>
    </div>
</div>
@code
{
    private int _gamePatternIndex;
    protected int gamePatternIndex 
    { 
        get { return _gamePatternIndex; }
        set
        {
            if (value < 0) { _gamePatternIndex = GamePatterns.GetCount() - 1; }
            else if (value >= GamePatterns.GetCount()) { _gamePatternIndex = 0; }
            else _gamePatternIndex = value;
            settings.SelectedPattern = GamePatterns.GetPatternName(_gamePatternIndex);
        }
    }

    protected void SelectDauber(MouseEventArgs e, string val)
    {
        settings.Dauber = val;
    }
}