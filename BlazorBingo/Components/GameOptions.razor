@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Game Options</h3>

<div class="row mb-2">
    <label for="playerName" class="col-sm-2 col-form-label">Name</label>
    <div class="col-auto">
        <input type="text" id="playerName" class="form-control" @bind="PlayerName" placeholder="player name" />
    </div>
</div>

<label>Stamp</label>
<InputSelect @bind-Value="StampClass">
    @foreach (var stampClass in Stampers)
    {
            <option value="@stampClass.CssName()">@stampClass</option>
    }
</InputSelect>

<div>
    <label>Caller Voice</label>
    <select id="voiceSelect"></select>
</div>

@code {
    public static readonly string[] Stampers = new string[]
    {
        "Random",
        "Banana",
        "Basketball",
        "Cat",
        "Cat Face",
        "Cherries",
        "Christmas Tree",
        "Cookie",
        "Curling",
        "Dog Face",
        "Doughnut",
        "Football",
        "Golfer",
        "Heart",
        "Hot Dog",
        "Ice Cream",
        "Kangaroo",
        "Kiss",
        "Money Bag",
        "Musical Note",
        "Paw Prints",
        "Penguin",
        "Ping Pong",
        "Present",
        "Scooter",
        "Smiley",
        "Snowman",
        "Soccer",
        "Statue of Liberty",
        "Strawberry",
        "Tennis",
        "Tractor",
        "Trident",
        "Video Game Controller"
    };

    private string playerName;
    public string PlayerName { 
        get
        {
            return playerName;
        }
        set
        {
            playerName = value;
            localStorage.SetItemAsync("playerName", playerName);
        }
    }

    public string CallerVoice { get; set; } = string.Empty;
    public int GamesPlayed { get; set; }
    public int GamesWon { get; set; }


    private string stampClass = string.Empty;
    private string StampClass
    {
        get
        {
            return stampClass;
        }
        set
        {
            stampClass = value;
            localStorage.SetItemAsync("stampClass", stampClass);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        playerName = await localStorage.GetItemAsync<string>("playerName");
        GamesPlayed = await localStorage.GetItemAsync<int>("gamesPlayed");
        GamesWon = await localStorage.GetItemAsync<int>("gamesWon");
        stampClass = await localStorage.GetItemAsync<string>("stampClass") ?? "random";
    }

    async Task NameChanged(ChangeEventArgs e)
    {
        PlayerName = e?.Value?.ToString() ?? string.Empty;
        await localStorage.SetItemAsync("playerName", PlayerName);
    }

}
