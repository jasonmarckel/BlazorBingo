<h3>
    Bingo Hall ~
    <span style="font-family:monospace; font-weight:bold; font-size:smaller;">@gameCode</span><button @onclick="Copy" title="copy" class="symbol" style="border:none; background-color:transparent;">&#128471;</button>
</h3>

<button type="button" class="btn btn-primary" @onclick="Pick">Pick</button>
<button type="button" class="btn btn-secondary" @onclick="Restart">New Game</button>

<label># of calls: @calledNumbers.Count</label>
<label>Last called: @lastCalled</label>

<Flashboard @ref="flashboard"></Flashboard>

<label>Players</label>
<ul>
    @foreach(var player in players)
    {
        <li>@player</li>
    }
</ul>

<div>
    @notificationMessage
</div>

@code {
    private char[] bingo = new char[] { 'B', 'I', 'N', 'G', 'O' };
    private int cardSize = 75;
    private HashSet<int> calledNumbers = new HashSet<int>();
    private Random rnd = new Random();
    private string lastCalled = string.Empty;
    private string gameCode = string.Empty;
    private SortedSet<string> players = new();
    private string notificationMessage = string.Empty;

    private Flashboard? flashboard { get; set; }

    private const string BINGO_KEY_CHARS = "BCDFGHJKLMNPQRSTVWXYZ";

    protected override async Task OnInitializedAsync()
    {
        gameCode = Utility.GenerateKey(4, BINGO_KEY_CHARS);
#if DEBUG
    gameCode = "0000";
#endif
        await Interop.Host(this, gameCode);
    }

    private async void Pick()
    {
        if (calledNumbers.Count == cardSize) { return; }
        int x;
        do
        {
            x = rnd.Next(1, cardSize + 1);
        } while (!calledNumbers.Add(x));
        int col = ((x - 1) / 15);
        lastCalled = $"{bingo[col]}-{x}";
        flashboard!.Add(bingo[col], x);
        await Interop.Broadcast("pick", lastCalled);
    }

    private async void Copy()
    {
        await Interop.CopyToClipboard(gameCode);
    }

    private async void Restart()
    {
        flashboard!.ClearBoard();
        calledNumbers.Clear();
        lastCalled = string.Empty;
        notificationMessage = string.Empty;
        await Interop.Broadcast("restart", "");
    }

}