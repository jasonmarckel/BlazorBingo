<div id="flashboard" class="prevent-select mb-1">
    <table>
        @for (int r = 0; r < BINGO.Length; r++)
        {
            <tr>
                <td>@BINGO[r]</td>
                @for (int i = 0; i < z; i++)
                {
                    int n = (r * z) + i + 1;
                    <td><span class="@GetCssClass(n)">@n</span></td>
                }
            </tr>
        }
    </table>
</div>

@code {
    [Parameter]
    public int BoardSize { get; set; }

    public bool IsFinishedCalling 
    {
        get
        {
            return CalledNumbers.Count == BoardSize;
        }        
    }

    private const string BINGO = "BINGO";
    private int z;
    public List<int> CalledNumbers { get; private set; } = null!;
    private int lastCalled;

    protected override void OnInitialized()
    {
        z = BoardSize / 5;
        CalledNumbers = new List<int>(capacity: BoardSize);
        lastCalled = 0;
    }

    private string GetCssClass(int n)
    {
        if (lastCalled == n) { return "lastCalled"; }
        return CalledNumbers.Contains(n) ? "visible" : "invisible";
    }

    public void ClearBoard()
    {
        CalledNumbers.Clear();
        lastCalled = 0;
        this.StateHasChanged(); // force the UI to refresh
    }

    public void UpdateCalledNumbersCSV(string value)
    {
        CalledNumbers.Clear();
        CalledNumbers.AddRange(value.Split(",").Select(i => Int32.Parse(i)));
        lastCalled = CalledNumbers.LastOrDefault();
        this.StateHasChanged(); // force the UI to refresh
    }

    public string LastCalled
    {
        get
        {
            int col = ((lastCalled - 1) / z);
            return $"{BINGO[col]}-{lastCalled}";
        }
    }

    public string CalledNumbersCSV
    {
        get
        {
            return String.Join(",", CalledNumbers);
        }
    }

    public void Pick()
    {
        int x;
        do
        {
            x = ThreadSafeRandom.ThisThreadsRandom.Next(1, BoardSize + 1);
        } while (CalledNumbers.Contains(x));
        CalledNumbers.Add(x);
        lastCalled = x;
        StateHasChanged(); // refresh the UI
    }

}