@page "/settings"
@inject GameSettings settings
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="card mb-1">
    <div class="card-body">
        <h5 class="card-title">Game Settings</h5>
        @if (isLoaded)
        {
            <div class="row mb-2">
                <label>Dauber</label>
                <InputSelect @bind-Value="settings.Dauber">
                    @foreach (var dauber in Daubers)
                    {
                        <option value="@dauber.CssName()">@dauber</option>
                    }
                </InputSelect>
            </div>

            <div class="row mb-2">
                <label>Card Theme</label>
                <InputSelect @bind-Value="settings.CardTheme">
                    @foreach (var cardTheme in CardThemes)
                    {
                        <option value="@cardTheme.CssName()">@cardTheme</option>
                    }
                </InputSelect>
            </div>

            @if (!userAgent!.Contains("Android", StringComparison.OrdinalIgnoreCase))
                {
                    <div class="row mb-2">
                        <label>Language</label>
                        <InputSelect @bind-Value="settings.SelectedLanguage">
                            @foreach (var lang in voices!.Select(x => x.lang).Distinct().Order())
                            {
                                <option>@lang</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="row mb-2">
                        <label>Caller Voice</label>
                        <InputSelect @bind-Value="settings.CallerVoice" id="voiceSelect">
                            @foreach (var voice in voices!.Where(x => x.lang == settings.SelectedLanguage))
                            {
                                <option value="@voice.name" data-lang="@voice.lang">@voice.name.Replace("Microsoft ", string.Empty)</option>
                            }
                        </InputSelect>
                    </div>
                }
            }
    </div>
</div>
<div class="card mb-1">
    <div class="card-body">
        <h5 class="card-title">System Info</h5>
        <p>User-Agent: @userAgent</p>
        <p>Platform: @platform</p>
        <p>Language: @language</p>
    </div>
</div>

@code {
    protected bool isLoaded;
    protected IEnumerable<Voice>? voices;
    protected string? userAgent;
    protected string? platform;
    protected string? language;

    protected override async Task OnInitializedAsync()
    {
        await Interop.InitVoices();
        string voicesJson = await Interop.GetVoices();
        voices = JsonSerializer.Deserialize<IEnumerable<Voice>>(voicesJson)?.Where(x => !x.name.StartsWith("Android"));
        userAgent = await Interop.GetUserAgent();
        platform = await Interop.GetPlatform();
        language = await Interop.GetLanguage();
        isLoaded = true;
    }

    public static readonly string[] CardThemes = new string[]
    {
        "Black",
        "Blue",
        "Green",
        "Orange",
        "Red",
        "Yellow"
    };

    public static readonly string[] Daubers = new string[]
    {
        "Random",
        "Banana",
        "Basketball",
        "Beer Mug",
        "Cat",
        "Cat Face with Heart Eyes",
        "Cherries",
        "Christmas Tree",
        "Cookie",
        "Curling",
        "Dog Face",
        "Doughnut",
        "Dragon",
        "Elephant",
        "Fire",
        "Football",
        "Fox",
        "Golfer",
        "Heart",
        "Hot Dog",
        "Ice Cream",
        "Kangaroo",
        "Kiss",
        "Money Bag",
        "Musical Note",
        "Paw Prints",
        "Penguin",
        "Ping Pong",
        "Present",
        "Scooter",
        "Shark",
        "Smiley",
        "Snowman",
        "Soccer",
        "Strawberry",
        "T-Rex",
        "Tennis",
        "Tractor",
        "Trident",
        "Video Game Controller",
        "Water Wave"
    };

    public record Voice
    {
        public required string name { get; set; }
        public required string lang { get; set; }
        public bool isDefault { get; set; }
        public bool localService { get; set; }
    }

// straight line patterns
//
// XXXXX ..... ..... ..... ..... X.... .X... ..X.. ...X. ....X X.... ....X
// ..... XXXXX ..... ..... ..... X.... .X... ..X.. ...X. ....X .X... ...X.
// ..... ..... XXXXX ..... ..... X.... .X... ..X.. ...X. ....X ..X.. ..X..
// ..... ..... ..... XXXXX ..... X.... .X... ..X.. ...X. ....X ...X. .X...
// ..... ..... ..... ..... XXXXX X.... .X... ..X.. ...X. ....X ....X X....

    public static uint[] StraightLinePatterns =
    {
        0b00000001111100000000000000000000, // row 1
        0b00000000000011111000000000000000, // row 2
        0b00000000000000000111110000000000, // row 3
        0b00000000000000000000001111100000, // row 4
        0b00000000000000000000000000011111, // row 5
        0b00000001000010000100001000010000, // col 1
        0b00000000100001000010000100001000, // col 2
        0b00000000010000100001000010000100, // col 3
        0b00000000001000010000100001000010, // col 4
        0b00000000000100001000010000100001, // col 5
        0b00000001000001000001000001000001, // backslash
        0b00000000000100010001000100010000  // forward slash
    };
}
