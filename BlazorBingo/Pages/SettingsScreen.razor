@page "/settings"
@inject GameSettings settings
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Game Settings</h5>
        @if (isLoaded)
        {
            <div class="row mb-2">
                <label>Dauber</label>
                <InputSelect @bind-Value="settings.Dauber">
                    @foreach (var dauber in Daubers)
                    {
                        <option value="@dauber.CssName()">@dauber</option>
                    }
                </InputSelect>
            </div>

            <div class="row mb-2">
                <label>Card Theme</label>
                <InputSelect @bind-Value="settings.CardTheme">
                    @foreach (var cardTheme in CardThemes)
                    {
                        <option value="@cardTheme.CssName()">@cardTheme</option>
                    }
                </InputSelect>
            </div>

            @if (!userAgent!.Contains("Android", StringComparison.OrdinalIgnoreCase))
                {
                    <div class="row mb-2">
                        <label>Language</label>
                        <InputSelect @bind-Value="settings.SelectedLanguage">
                            @foreach (var lang in voices!.Select(x => x.lang).Distinct().Order())
                            {
                                <option>@lang</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="row mb-2">
                        <label>Caller Voice</label>
                        <InputSelect @bind-Value="settings.CallerVoice" id="voiceSelect">
                            @foreach (var voice in voices!.Where(x => x.lang == settings.SelectedLanguage))
                            {
                                <option value="@voice.name" data-lang="@voice.lang">@voice.name.Replace("Microsoft ", string.Empty)</option>
                            }
                        </InputSelect>
                    </div>
                }
            }
    </div>
</div>

@code {
    protected bool isLoaded;
    protected Voice[]? voices;
    protected string? userAgent;

    protected override async Task OnInitializedAsync()
    {
        await Interop.InitVoices();
        string voicesJson = await Interop.GetVoices();
        voices = JsonSerializer.Deserialize<Voice[]>(voicesJson);
        userAgent = await Interop.GetUserAgent();
        isLoaded = true;
    }

    public static readonly string[] CardThemes = new string[]
    {
        "Black",
        "Blue",
        "Green",
        "Orange",
        "Red",
        "Yellow"
    };

    public static readonly string[] Daubers = new string[]
    {
        "Random",
        "Banana",
        "Basketball",
        "Beer Mug",
        "Cat",
        "Cat Face with Heart Eyes",
        "Cherries",
        "Christmas Tree",
        "Cookie",
        "Curling",
        "Dog Face",
        "Doughnut",
        "Dragon",
        "Elephant",
        "Football",
        "Fox",
        "Golfer",
        "Heart",
        "Hot Dog",
        "Ice Cream",
        "Kangaroo",
        "Kiss",
        "Money Bag",
        "Musical Note",
        "Paw Prints",
        "Penguin",
        "Ping Pong",
        "Present",
        "Scooter",
        "Shark",
        "Smiley",
        "Snowman",
        "Soccer",
        "Strawberry",
        "T-Rex",
        "Tennis",
        "Tractor",
        "Trident",
        "Video Game Controller",
        "Water Wave"
    };

    public record Voice
    {
        public required string name { get; set; }
        public required string lang { get; set; }
        public bool isDefault { get; set; }
        public bool localService { get; set; }
    }
}
