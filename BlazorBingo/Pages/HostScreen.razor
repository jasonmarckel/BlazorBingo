@page "/host"

<h3>
    Bingo Hall ~
    <span style="font-family:monospace; font-weight:bold; font-size:smaller;">@gameCode</span><button @onclick="Copy" title="copy" class="symbol" style="border:none; background-color:transparent;">&#128471;</button>
</h3>

<Flashboard @ref="flashboard"></Flashboard>

<div>
    <label>Players: @players.Count</label>
    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="Restart" style="float:right;">New Game</button>
</div>

<div>
    @notificationMessage
</div>

<div style="text-align:center; margin-top:0.5rem;">
    <button type="button" class="btn btn-primary" @onclick="Pick">Pick</button>
</div>

@code {
    protected const string BINGO = "BINGO";
    protected const int boardSize = 75;
    protected HashSet<int> calledNumbers = new HashSet<int>();
    protected Random rnd = new Random();
    protected string lastCalled = string.Empty;
    protected string gameCode = string.Empty;
    protected SortedSet<string> players = new();
    protected string notificationMessage = string.Empty;

    protected Flashboard? flashboard { get; set; }

    protected const string BINGO_KEY_CHARS = "BCDFGHJKLMNPQRSTVWXYZ";

    protected override async Task OnInitializedAsync()
    {
        gameCode = Utility.GenerateKey(4, BINGO_KEY_CHARS);
#if DEBUG
    gameCode = "0000";
#endif
        await Interop.Host(this, gameCode);
    }

    protected async void Pick()
    {
        if (calledNumbers.Count == boardSize) { return; }
        int x;
        do
        {
            x = rnd.Next(1, boardSize + 1);
        } while (!calledNumbers.Add(x));
        int col = ((x - 1) / 15);
        lastCalled = $"{BINGO[col]}-{x}";
        flashboard!.Add(x);
        notificationMessage = string.Empty;
        await Interop.Broadcast("pick", lastCalled);
    }

    protected async void Copy()
    {
        await Interop.CopyToClipboard(gameCode);
    }

    protected async void Restart()
    {
        flashboard!.ClearBoard();
        calledNumbers.Clear();
        lastCalled = string.Empty;
        notificationMessage = string.Empty;
        await Interop.Broadcast("restart", "");
    }
}