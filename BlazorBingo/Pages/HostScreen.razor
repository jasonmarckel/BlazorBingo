@page "/host"

<div class="row">
    <div class="col-auto">
        Bingo Hall
        &nbsp;
        <span style="font-family:monospace; font-weight:bold;">@gameCode</span>&nbsp;<button @onclick="Copy" title="copy" class="symbolbutton"style="font-size:16pt; line-height:16pt; padding:0; vertical-align:baseline;">&#128471;</button>
    </div>
    <div class="col-auto">
        <label><span class="symbol silhouettebust" title="number of players"></span> @players.Count</label>
    </div>
    <div class="col-auto">
        <button type="button" class="symbolbutton" @onclick="Restart" title="New Game" style="font-size:16pt; line-height:16pt; padding:0; vertical-align:baseline;">&#8634;</button>
    </div>
</div>

<Flashboard @ref="flashboard"></Flashboard>

<div>
    <button type="button" class="btn btn-primary" @onclick="Pick" disabled="@IsCalling">Pick</button>
</div>

<div>
    @notificationMessage
</div>

@code {
    protected const string BINGO = "BINGO";
    protected const int boardSize = 75;
    protected HashSet<int> calledNumbers = new HashSet<int>();
    protected string lastCalled = string.Empty;
    protected string gameCode = string.Empty;
    protected SortedSet<string> players = new();
    protected string notificationMessage = string.Empty;
    protected bool IsCalling;

    protected Flashboard? flashboard { get; set; }

    protected const string BINGO_KEY_CHARS = "BCDFGHJKLMNPQRSTVWXYZ";

    protected override async Task OnInitializedAsync()
    {
        gameCode = Utility.GenerateKey(4, BINGO_KEY_CHARS);
#if DEBUG
    gameCode = "0000";
#endif
        await Interop.Host(this, gameCode);
    }

    protected async void Pick()
    {
        if (calledNumbers.Count == boardSize) { return; }
        IsCalling = true;
        int x;
        do
        {
            x = ThreadSafeRandom.ThisThreadsRandom.Next(1, boardSize + 1);
        } while (!calledNumbers.Add(x));
        int col = ((x - 1) / 15);
        lastCalled = $"{BINGO[col]}-{x}";
        flashboard!.Add(x);
        notificationMessage = string.Empty;
        await Interop.Broadcast("pick", lastCalled);
        await Task.Delay(3000); // wait a few seconds before the next pick can be made
        IsCalling = false;
        StateHasChanged(); // refresh the UI
    }

    protected async void Copy()
    {
        await Interop.CopyToClipboard(gameCode);
    }

    protected async void Restart()
    {
        flashboard!.ClearBoard();
        calledNumbers.Clear();
        lastCalled = string.Empty;
        notificationMessage = string.Empty;
        await Interop.Broadcast("restart", "");
    }
}