@page "/play/{gamecode?}"
@implements IDisposable
@inject GameSettings settings
@inject NavigationManager Navigation

<Flashboard @ref="flashboard"></Flashboard>

<div id="BingoCard" class="@settings.CardTheme prevent-select mb-1">
    <table>
        <thead>
            <tr>
                <td>B</td>
                <td>I</td>
                <td>N</td>
                <td>G</td>
                <td>O</td>
            </tr>
        </thead>
        <tbody>
        @for (int r = 0; r < 5; r++)
        {
            <tr>
                @for (int c = 0; c < 5; c++)
                {
                    var square = squares[r, c];                    
                    if(square == null) { continue; }
                    var row = r;
                    var col = c;
                    <td>
                        <div class="square" @onclick="eventargs => StampSquare(eventargs, row, col)">
                            <div>@((MarkupString)square.Value.ToString())</div>
                            <div class="@square.StampClass" style="transform: rotate(@(square.StampRotation)deg);"></div>
                        </div>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>

<div id="PlayerControls" class="row mb-2" style="max-width:13cm;">
    <div class="col" style="text-align:center;">
        <button type="button" class="btn btn-success" @onclick="CallBingo">Bingo!</button>
    </div>
    <div class="col" style="text-align:end;">
        <button type="button" class="symbolbutton" title="Settings" @onclick="ToggleSettings"><span class="gear"></span></button>
        <button type="button" class="symbolbutton" title="mute or unmute" @onclick="ToggleMute"><span class="@( isMuted ? "mute" : "speaker" )"></span></button>
        <button type="button" class="symbolbutton" title="New card" @onclick="GenerateNewCard" disabled="@gameStarted"><span class="refresh"></span></button>
    </div>
</div>

@if (showSettings)
{
    <SettingsScreen></SettingsScreen>
}

@code {
    [Parameter]
    public string? GameCode { get; set; }

    protected bool isMuted;
    protected bool showSettings;
    protected bool gameStarted;
    protected Flashboard? flashboard { get; set; }
    protected const int boardSize = 75;

    protected string StamperCssClass
    {
        get
        {
            return settings.Dauber == "random" ? SettingsScreen.Daubers[ThreadSafeRandom.ThisThreadsRandom.Next(1, SettingsScreen.Daubers.Length)].CssName() : settings.Dauber;
        }
    }

    // https://stackoverflow.com/questions/60812587/c-sharp-non-nullable-field-lateinit

    protected readonly Square[,] squares = new Square[5, 5];

    protected void ToggleMute()
    {
        isMuted = !isMuted;
        Interop.PrimeVoiceSynthesis(settings.CallerVoice, settings.SelectedLanguage);  // keep speechSynthesis for iOS alive
    }

    protected void GenerateNewCard()
    {
        int numberOfValuesPerColumn = boardSize / 5;

        // generate a set of 5 unique integers for each column
        for (int c = 0; c < 5; c++)
        {
            // determine the start number for the column
            int startValue = (c * numberOfValuesPerColumn) + 1;
            // generate the range of numbers and shuffle
            var uniqueValues = new List<int>(Enumerable.Range(startValue, numberOfValuesPerColumn));
            uniqueValues.Shuffle();
            // copy the unique values for the column to the card
            for (int r = 0; r < 5; r++)
            {
                squares[r, c] = new Square() { Value = uniqueValues.ElementAt(r) };
                if (c == 2 && r == 2)
                {
                    squares[r, c].Value = 0; //FREE
                    squares[r, c].StampClass = "stamp solidstar"; //TODO: theme the star
                }
            }
        }
    }

    protected class Square
    {
        public int Value { get; set; }
        public string StampClass { get; set; } = string.Empty;
        public int StampRotation { get; set; }
        public bool IsStamped { get { return !string.IsNullOrWhiteSpace(StampClass); } }
    }

    protected void StampSquare(MouseEventArgs e, int row, int col)
    {
        if (row == 2 && col == 2) { return; }
        var square = squares[row, col];
        square.StampRotation = ThreadSafeRandom.ThisThreadsRandom.Next(-30, 30);
        square.StampClass = square.IsStamped ? string.Empty : "stamp " + StamperCssClass;
        Interop.PrimeVoiceSynthesis(settings.CallerVoice, settings.SelectedLanguage);  // keep speechSynthesis for iOS alive
    }

    protected void ClearCard()
    {
        flashboard!.ClearBoard();
        for (int c = 0; c < 5; c++)
        {
            for (int r = 0; r < 5; r++)
            {
                if (c == 2 && r == 2) { continue; }
                squares[r, c].StampClass = string.Empty;
            }
        }
    }

    protected void CallBingo()
    {
        Interop.NotifyHost("bingo", settings.PlayerName);
    }

    private bool IsValidCard()
    {
        var card = new bool[5,5];
        for(var r = 0; r < 5; r++)
        {
            for(var c = 0; c < 5; c++)
            {
                card[r, c] = squares[r, c].IsStamped && (flashboard!.calledNumbers.Contains(squares[r, c].Value) || squares[r, c].Value == 0);
            }
        }

        // traditional
        // check rows

        bool isValid = false;
        return isValid;
    }

    protected override void OnInitialized()
    {
        GenerateNewCard();
        settings.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        settings.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(GameCode)) { Navigation.NavigateTo("./"); return; }
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-7.0#handle-incomplete-async-actions-at-render
        // https://aryehsilver.co.uk/blazor-attempts-to-render-before-oninitializedasync-method-has-finished/
        await Interop.Connect(this, GameCode!.ToUpper(), settings.PlayerName);
        await Interop.RequestWakeLock();
        await Interop.InitVoices();
    }

    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    return base.OnAfterRenderAsync(firstRender);
    //}

    // https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-7.0#handleprevent-location-changes
    //private IDisposable? registration;

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        registration = Navigation.RegisterLocationChangingHandler(OnLocationChanging);
    //    }
    //}

    //private ValueTask OnLocationChanging(LocationChangingContext context)
    //{
    //    return ValueTask.CompletedTask;
    //}

    //public void Dispose()
    //{
    //    registration?.Dispose();
    //}

    protected void ToggleSettings()
    {
        showSettings = !showSettings;
    }

}
