@page "/play/{gamecode}"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

<Flashboard @ref="flashboard"></Flashboard>

<div id="BingoCard" class="@settings.CardTheme prevent-select mb-1">
    <table>
        <thead>
            <tr>
                <td>B</td>
                <td>I</td>
                <td>N</td>
                <td>G</td>
                <td>O</td>
            </tr>
        </thead>
        <tbody>
        @for (int r = 0; r < 5; r++)
        {
            <tr>
                @for (int c = 0; c < 5; c++)
                {
                    var square = squares[r, c];                    
                    if(square == null) { continue;  }
                    var row = r;
                    var col = c;
                    <td @onclick="eventargs => StampSquare(eventargs, row, col)">@((MarkupString)square.Value)<div class="@square.StampClass" style="transform: rotate(@(square.StampRotation)deg);"></div></td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>

<button type="button" class="btn btn-success" @onclick="CallBingo">Bingo!</button>

<a role="button" class="btn btn-outline-secondary" title="Settings" href="./settings"><span class="gear"></span></a>

<button type="button" class="btn btn-outline-secondary" title="mute or unmute" @onclick="ToggleMute"><span class="@( isMuted ? "mute" : "speaker" )"></span></button>

@code {
    [Parameter]
    public string? GameCode { get; set; }

    protected GameSettings settings = new GameSettings();

    protected bool isMuted;

    protected Flashboard? flashboard { get; set; }
    protected const int boardSize = 75;

    protected string StamperCssClass
    {
        get
        {
            return settings.Dauber == "random" ? SettingsScreen.Daubers[rnd.Next(1, SettingsScreen.Daubers.Length)].CssName() : settings.Dauber;
        }
    }

    // https://stackoverflow.com/questions/60812587/c-sharp-non-nullable-field-lateinit

    protected readonly Square[,] squares = new Square[5, 5];
    protected Random rnd = new Random();  // random number generator (RNG)

    protected void ToggleMute()
    {
        isMuted = !isMuted;
    }

    protected void GenerateNewCard()
    {
        var uniqueValues = new HashSet<int>();
        int numberOfValuesPerColumn = boardSize / 5;

        // generate a set of 5 unique integers for each column
        for (int c = 0; c < 5; c++)
        {
            // determine the low and high numbers for the column
            int minValue = (c * numberOfValuesPerColumn) + 1;
            int maxValue = (c * numberOfValuesPerColumn) + numberOfValuesPerColumn;
            // initialize the HashSet for the column to hold the uniqe values
            uniqueValues.Clear();
            // generate random numbers until we have 5 unique numbers for the column
            while (uniqueValues.Count < 5)
            {
                // generate a random number
                int x = rnd.Next(minValue, maxValue);
                // the number will only be added to the HashSet if it
                // does not already exist in the HashSet
                uniqueValues.Add(x);
            }
            // copy the unique values for the column to the card
            for (int r = 0; r < 5; r++)
            {
                squares[r, c] = new Square() { Value = uniqueValues.ElementAt(r).ToString() };
                if (c == 2 && r == 2)
                {
                    squares[r, c].Value = "&nbsp;"; //FREE
                    squares[r, c].StampClass = "stamp solidstar"; //TODO: theme the star
                }
            }
        }
    }

    protected class Square
    {
        public string Value { get; set; } = string.Empty;
        public string StampClass { get; set; } = string.Empty;
        public int StampRotation { get; set; }
        public bool IsStamped { get { return !string.IsNullOrWhiteSpace(StampClass); } }
    }

    protected void StampSquare(MouseEventArgs e, int row, int col)
    {
        if (row == 2 && col == 2) { return; }
        var square = squares[row, col];
        square.StampRotation = rnd.Next(-30, 30);
        square.StampClass = square.IsStamped ? string.Empty : "stamp " + StamperCssClass;
    }

    protected void ClearCard()
    {
        flashboard!.ClearBoard();
        for (int c = 0; c < 5; c++)
        {
            for (int r = 0; r < 5; r++)
            {
                if (c == 2 && r == 2) { continue; }
                squares[r, c].StampClass = string.Empty;
            }
        }
    }

    protected void CallBingo()
    {
        Interop.NotifyHost("bingo", settings.PlayerName);
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(GameCode)) { Navigation.NavigateTo("./"); return; }
        // GenerateNewCard() must be called prior to the await/async operations
        // otherwise the page will try to render before each Square in the 'squares' field
        // has been instantiated.  This will lead to a null reference exception
        // in the loop rendering the squares.
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-7.0#handle-incomplete-async-actions-at-render
        // https://aryehsilver.co.uk/blazor-attempts-to-render-before-oninitializedasync-method-has-finished/
        GenerateNewCard();
        settings = await localStorage.GetItemAsync<GameSettings>("Settings");
        await Interop.Connect(this, GameCode!.ToUpperInvariant(), settings.PlayerName);
        await Interop.InitVoices();
    }

    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    return base.OnAfterRenderAsync(firstRender);
    //}
}
