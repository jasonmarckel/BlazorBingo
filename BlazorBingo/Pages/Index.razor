@page "/"
@inject GameSettings settings
@inject NavigationManager Navigation

<PageTitle>Blazor Bingo</PageTitle>

<h1>Blazor Bingo</h1>

<div class="row mb-2">
    <label for="playerName" class="col-sm-2 col-form-label">Name</label>
    <div class="col-auto">
        <input type="text" id="playerName" class="form-control" @bind="playerName" @bind:after="RefreshCanJoin" placeholder="player name" maxlength="32" />
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-outline-secondary" title="Host" @onclick="Host">Host</button>
    </div>
</div>
<div class="row mb-2">
    <label for="gameCode" class="col-sm-2 col-form-label">Bingo Hall</label>
    <div class="col-auto">
        <input type="text" id="gameCode" class="form-control gameCode" 
        @bind:event="oninput" @bind:get="gameCode" @bind:set="OnGameCodeInput" 
        placeholder="enter code" maxlength="4" minlength="4"
        autocapitalize="characters" pattern="[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]{4}" />
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-primary" @onclick="Join" disabled="@(!canJoin)">Join</button>
    </div>
</div>
<div class="row mb-2">
    <div class="col-sm-2"></div>
    <div class="col-auto">
        <small>version <code style="color: inherit;">2023.01.18.02</code></small>
    </div>
</div>
                                                                       
@code {
    protected string gameCode = string.Empty;
    protected string playerName = string.Empty;
    protected bool canJoin;

    protected override async Task OnInitializedAsync()
    {
        await settings.LoadAsync();
        playerName = settings.PlayerName;
        if (string.IsNullOrEmpty(settings!.SelectedLanguage)) { settings.SelectedLanguage = await Interop.GetLanguage(); }
#if DEBUG
    gameCode = "0000";
    RefreshCanJoin();
#endif
        await Interop.ReleaseWakeLock();
    }

    private void RefreshCanJoin()
    {
        canJoin =
            !string.IsNullOrWhiteSpace(playerName) &&
            !string.IsNullOrWhiteSpace(gameCode) &&
            gameCode.Length == 4;

    }

    protected void OnGameCodeInput(string value)
    {
        gameCode = value;
        RefreshCanJoin();
    }

    protected void Host()
    {
        settings.PlayerName = playerName;
        Interop.PrimeVoiceSynthesis(settings.CallerVoice, settings.SelectedLanguage);  // prime speechSynthesis for iOS
        Navigation.NavigateTo("./host");
    }

    protected void Join()
    {
        settings.PlayerName = playerName;
        Interop.PrimeVoiceSynthesis(settings.CallerVoice, settings.SelectedLanguage);  // prime speechSynthesis for iOS
        Navigation.NavigateTo($"./play/{gameCode.ToUpper()}");
    }
}